<?php 

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Asset\LibraryDiscoveryInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Markup;



/**
 * Implements hook_install().
 */
function glossary_term_install() {
  // Create the vocabulary for glossary terms.
  $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create([
    'vid' => 'glossary',
    'name' => 'Glossary',
    'description' => 'Vocabulary for glossary terms.',
  ]);
  $vocabulary->save();
}

/**
 * Implements hook_uninstall().
**/

function glossary_term_uninstall() {
  // Delete the vocabulary for glossary terms.
  $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load('glossary');
  $vocabulary->delete();
}

/**
 * Implements hook_entity_base_field_info().
 */
function glossary_term_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'node') {
    $fields['description'] = BaseFieldDefinition::create('text_long')
      ->setLabel(new TranslatableMarkup('Glossary Description'))
      ->setDescription(new TranslatableMarkup('Description for glossary terms found in content.'))
      ->setDisplayOptions('form', [
        'type' => 'text_textarea',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDefaultValue('')
      ->addPropertyConstraints('value', [
        'Length' => [
          'max' => 255,
          'maxMessage' => t('The description cannot exceed 255 characters.'),
        ],
      ]);
  }

  return $fields;
}

/**
 * Implements hook_help().
 */
function glossary_term_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.glossary_term':
      return '<p>' . t('This module provides glossary tooltip functionality for node forms.') . '</p>';
  }
}


/**
 * Implements hook_form_alter().
 */
function glossary_term_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_article_edit_form', 'node_page_edit_form'])) {
    $form['#attached']['library'][] = 'core/jquery.ui.tooltip';
    $form['#attached']['library'][] = 'glossary_term/glossary_term';
    $form['#attached']['drupalSettings']['glossary_term']['terms'] = glossary_term_get_glossary_terms();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function glossary_term_node_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node') {
    $content = $entity->body->value;

    // Retrieve the glossary terms from the vocabulary.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['vid' => 'glossary']);

    // Loop through each term and check if it exists in the content.
    foreach ($terms as $term) {
      $title = $term->getName();
      $description = $term->get('description')->value;

      // Create a replacement HTML for the glossary term.
      $replacement = '<span class="glossary-term glossary-highlight" data-description="' . ($description ? htmlentities($description) : '') . '">' . $title . '</span>';

      // Replace the glossary term in the content with the replacement HTML.
      $content = preg_replace('/\b' . preg_quote($title, '/') . '\b/i', $replacement, $content);
    }

    // Update the field value with the modified content.
    $entity->body->value = $content;
  }
}


/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function glossary_term_preprocess_node(&$variables) {
  // Check if the node type is "Article" or "Basic page".
  $allowed_types = ['article', 'page'];

  if (in_array($variables['node']->getType(), $allowed_types)) {
    // Get the text from the node.
    $text = $variables['node']->body->value;

    // Get all Glossary entities.
    $keywords = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['vid' => 'glossary']);

    // Replace the keywords with an anchor tag and a span with the class "glossary-term".
    foreach ($keywords as $keyword) {
      $keyword_text = $keyword->label();
      $keyword_description = $keyword->get('description')->value;

      $replacement = '<span class="glossary-term glossary-highlight" data-description="' . ($keyword_description ? htmlentities($keyword_description) : '') . '">' . $keyword_text . '</span>';
      $text = str_ireplace($keyword_text, $replacement, $text);
    }

    // Update the node's text with the highlighted keywords.
    $variables['node']->body->value = Markup::create($text);

    // Add the custom JavaScript and CSS library for the tooltip and highlighting.
    $variables['#attached']['library'][] = 'glossary_term/glossary_term';
    $variables['#attached']['library'][] = 'core/jquery.ui.tooltip';
  }
}

/**
 * Helper function to retrieve glossary terms.
 */
function glossary_term_get_glossary_terms() {
  $glossary_terms = [];
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['vid' => 'glossary']);
  foreach ($terms as $term) {
    $description = $term->get('description')->value;
    if (!empty($description)) {
      $glossary_terms[$term->getName()] = $description;
    }
  }
  return $glossary_terms;
}