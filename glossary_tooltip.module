<?php 

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Implements hook_uninstall().
 */
function glossary_tooltip_uninstall() {
  // Delete the vocabulary for glossary terms.
  $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load('glossary');
  $vocabulary->delete();
}
/**
 * Implements hook_entity_base_field_info().
 */
function glossary_tooltip_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'node') {
    $fields['description'] = BaseFieldDefinition::create('text_long')
      ->setLabel(new TranslatableMarkup('Glossary Description'))
      ->setDescription(new TranslatableMarkup('Description for glossary terms found in content.'))
      ->setDisplayOptions('form', [
        'type' => 'text_textarea',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDefaultValue('')
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->addPropertyConstraints('value', [
        'Length' => [
          'max' => 255,
          'maxMessage' => t('The description cannot exceed 255 characters.'),
        ],
      ]);
  }

  return $fields;
}

/**
 * Implements hook_help().
 */
function glossary_tooltip_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.glossary_tooltip':
      return '<p>' . t('This module provides glossary tooltip functionality for node forms.') . '</p>';
  }
}

/**
 * Implements hook_form_alter().
 */
function glossary_tooltip_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_article_edit_form', 'node_page_edit_form'])) {
    $form['#attached']['library'][] = 'glossary_tooltip/glossary_tooltip';
    $form['#attached']['drupalSettings']['glossary_tooltip']['terms'] = glossary_tooltip_get_glossary_terms();
  }
}

/**
 * Form validation callback for node form.
 */
function glossary_tooltip_node_form_validate(&$form, FormStateInterface $form_state) {
  // Scan the text inside the content type.
  $node = $form_state->getFormObject()->getEntity();
  $body = $node->get('body')->value;

  // Get glossary terms.
  $glossary_terms = [];
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['vid' => 'glossary']);
  foreach ($terms as $term) {
    $glossary_terms[] = $term->getName();
  }

  // Find glossary terms in the content and add descriptions.
  foreach ($glossary_terms as $term) {
    $term_pattern = '/\b' . preg_quote($term, '/') . '\b/i';
    if (preg_match($term_pattern, $body)) {
      $term_entity = reset($term_entity);
      $term_description = $term_entity->get('description')->value;
      $description = !empty($term_description) ? htmlentities($term_description) : '';
      $replacement = '<span class="glossary-tooltip glossary-highlight" data-description="' . $description . '" style="display: none;">' . $term . '</span>';
      $body = preg_replace($term_pattern, $replacement, $body);
    }
  }

  // Truncate data-description to 100 characters.
  $body = preg_replace_callback('/<span class="glossary-tooltip glossary-highlight" data-description="([^"]+)">([^<]+)<\/span>/', function ($matches) {
    $description = $matches[1];
    $term = $matches[2];
    if (mb_strlen($description) > 100) {
      $description = mb_substr($description, 0, 100) . '...';
    }
    return '<span class="glossary-tooltip glossary-highlight" data-description="' . htmlentities($description) . '">' . $term . '</span>';
  }, $body);

  // Set the modified body back to the form state for further processing.
  $node->set('body', $body);
}

/**
 * Helper function to retrieve glossary terms.
 */
function glossary_tooltip_get_glossary_terms() {
  $glossary_terms = [];
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['vid' => 'glossary']);
  foreach ($terms as $term) {
    $description = $term->get('description')->value;
    if (!empty($description)) {
      $glossary_terms[$term->getName()] = $description;
    }
  }
  return $glossary_terms;
}



/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function glossary_tooltip_preprocess_node(&$variables) {
  // Add necessary CSS and JavaScript.
  $variables['#attached']['library'][] = 'glossary_tooltip/glossary_tooltip';
}

/**
 * Form submission callback for node form.
 */
function glossary_tooltip_node_form_submit($form, FormStateInterface $form_state) {
  // Get the submitted node entity.
  $node = $form_state->getFormObject()->getEntity();

  // Save the modified body to the node.
  $node->body->value = $form_state->getValue('body');
  $node->save();

  // Attach JavaScript libraries.
  $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
  $form['#attached']['library'][] = 'core/drupal.dialog.ajax-tabbing';
  $form['#attached']['library'][] = 'core/jquery.ui.tooltip';

  // Get the module or theme path.
  $module_path = \Drupal::service('extension.list.module')->getPath('glossary_tooltip');

  // Add custom JavaScript code.
  $form['#attached']['drupalSettings']['glossary_tooltip'] = [
    'selector' => '.glossary-tooltip',
    'script' => $module_path . '/js/glossary_tooltip.js',
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function glossary_tooltip_node_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'article') {
    $content = $entity->get('body')->getValue()[0]['value'];

    // Retrieve the glossary terms from the vocabulary.
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', 'glossary');
    $term_ids = $query->accessCheck(FALSE)->execute();
    $terms = Term::loadMultiple($term_ids);

    // Loop through each term and check if it exists in the content.
    foreach ($terms as $term) {
      $title = $term->getName();

      if (stripos($content, $title) !== false) {
        $description = $term->get('description')->value;
        $replacement = '<span class="glossary-tooltip glossary-highlight" data-description="' . ($description ? htmlentities($description) : '') . '">' . $title . '</span>';
        $pattern = '/\b' . preg_quote($title, '/') . '\b/i';
        $content = preg_replace($pattern, $replacement, $content);
      }
    }

    // Update the field value with the modified content.
    $entity->get('body')->setValue($content);
  }
}